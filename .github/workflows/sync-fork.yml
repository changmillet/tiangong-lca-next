name: Sync Fork (FF push or create PR)

on:
  schedule:
    - cron: '30 3 * * *'    # 每天 03:30 UTC
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  UPSTREAM_REPO: linancn/tiangong-lca-next
  UPSTREAM_BRANCH: main
  TARGET_BRANCH: main
  SYNC_BRANCH: sync-upstream-main   # 用于自动开 PR 的分支

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Attempt upstream merge via API
        id: merge
        uses: actions/github-script@v7
        env:
          TARGET_BRANCH: ${{ env.TARGET_BRANCH }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branch = process.env.TARGET_BRANCH;
            core.info(`Requesting merge from upstream into ${branch}...`);
            try {
              const response = await github.rest.repos.mergeUpstream({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch,
              });
              const merged = response.data.merged === true;
              const message = response.data.message || '';
              core.info(message || (merged ? 'Merged upstream changes.' : 'Already up to date.'));
              core.setOutput('result', merged ? 'merged' : 'up_to_date');
              core.setOutput('message', message);
            } catch (error) {
              if (error.status === 409) {
                core.warning(`Upstream merge reported conflicts: ${error.message}`);
                core.setOutput('result', 'conflict');
                core.setOutput('message', error.message || 'Conflicts detected with upstream');
              } else {
                core.error(`mergeUpstream failed: ${error.message}`);
                throw error;
              }
            }

      - name: Up-to-date confirmation
        if: steps.merge.outputs.result == 'up_to_date'
        run: echo "${{ steps.merge.outputs.message || 'Already up to date.' }}"

      - name: Upstream changes merged
        if: steps.merge.outputs.result == 'merged'
        run: echo "${{ steps.merge.outputs.message || 'Merged upstream changes.' }}"

      # 当 mergeUpstream 提示冲突时，回退到手动创建 PR 的流程
      - name: Checkout fork for conflict resolution
        if: steps.merge.outputs.result == 'conflict'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git
        if: steps.merge.outputs.result == 'conflict'
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Add remotes & fetch
        if: steps.merge.outputs.result == 'conflict'
        run: |
          git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git
          git fetch --prune upstream
          git fetch --prune origin

      - name: Create or update sync branch from upstream
        if: steps.merge.outputs.result == 'conflict'
        run: |
          git checkout -B ${{ env.SYNC_BRANCH }} upstream/${{ env.UPSTREAM_BRANCH }}
          git push -f origin ${{ env.SYNC_BRANCH }}

      - name: Open PR to ${{ env.TARGET_BRANCH }} if needed
        if: steps.merge.outputs.result == 'conflict'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: sync from upstream"
          title: "🔄 Sync from upstream/${{ env.UPSTREAM_BRANCH }}"
          body: |
            This PR is opened automatically because a fast-forward sync was not possible.
            - Upstream: `${{ env.UPSTREAM_REPO }}@${{ env.UPSTREAM_BRANCH }}`
            - Target: `${{ env.TARGET_BRANCH }}`

            Please review and merge. If conflicts exist, resolve them in this PR.
          branch: ${{ env.SYNC_BRANCH }}
          base: ${{ env.TARGET_BRANCH }}
          delete-branch: false
